{"version":3,"sources":["components/Post/Post.jsx","api/api.js","components/PostsList/PostsList.jsx","api/posts.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Comment/Comment.jsx","components/PostDetails/PostDetails.jsx","components/UserSelect/UserSelect.jsx","App.jsx","index.js"],"names":["Post","post","setPostId","useState","buttonStatus","setButtonStatus","userId","title","type","className","onClick","state","id","BASE_URL","PostsList","selectedUserId","posts","setPosts","useEffect","Number","fetch","then","response","json","data","map","key","getPostComments","postId","removePostComment","commentId","method","body","JSON","stringify","removeComment","addPostComment","name","email","addComment","NewCommentForm","selectedPostId","reloadComments","onSubmit","event","newComment","target","value","Object","values","preventDefault","placeholder","Comment","comment","PostDetails","postDetails","setPostDetails","comments","setComments","commentsVisible","setCommentsVisibility","catch","error","slice","UserSelect","setUserId","onChange","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3a33872.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Post.scss';\n\nexport const Post = function({ post, setPostId }) {\n  const [buttonStatus, setButtonStatus] = useState(false);\n\n  const buttonStatusHandler = function() {\n    setButtonStatus(state => !state);\n    if (!buttonStatus) {\n      setPostId(post.id);\n    } else {\n      setPostId(0);\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <b>\n          [User #\n          {post.userId}\n          ]:\n          {' '}\n        </b>\n        {post.title}\n      </div>\n      <button\n        type=\"button\"\n        className=\"PostsList__button button\"\n        onClick={buttonStatusHandler}\n      >\n        {buttonStatus ? (\n          'Close'\n        ) : (\n          'Open'\n        )}\n      </button>\n    </>\n  );\n};\n\nPost.propTypes = {\n  post: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      userId: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  setPostId: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PostsList.scss';\n\nimport { Post } from '../Post/Post';\n\nimport { getUserPosts, getAllPosts } from '../../api/posts';\n\nexport const PostsList = ({ selectedUserId, setPostId }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    if (Number(selectedUserId)) {\n      getUserPosts(selectedUserId)\n        .then((response) => {\n          setPosts(response);\n        });\n    } else {\n      (\n        getAllPosts()\n          .then((response) => {\n            setPosts(response);\n          })\n      );\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <Post post={post} setPostId={setPostId} />\n          </li>\n        ))}\n      </ul>\n\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.string.isRequired,\n  setPostId: PropTypes.func.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = function(userId) {\n  return fetch(`${BASE_URL}/posts/?userId=${userId}`)\n    .then(response => response.json())\n    .then(response => response.data);\n};\n\nexport const getAllPosts = function() {\n  return fetch(`${BASE_URL}/posts/`)\n    .then(response => response.json())\n    .then(response => response.data);\n};\n\nexport const getPostDetails = function(postId) {\n  return fetch(`${BASE_URL}/posts/?id=${postId}`)\n    .then(response => response.json())\n    .then(response => response.data[0].body)\n    /* eslint handle-callback-err: \"warn\" */\n    .catch(error => '');\n};\n","import { BASE_URL } from './api';\n\nconst removeComment = commentId => (\n  {\n    method: 'DELETE',\n    body: JSON.stringify({\n      commentId,\n    }),\n  }\n);\n\nconst addComment = (postId, name, email, body) => (\n  {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  }\n);\n\nexport const getPostComments = function(postId) {\n  return fetch(`${BASE_URL}/comments/?postId=${postId}`)\n    .then(response => response.json())\n    .then(response => response.data);\n};\n\nexport const removePostComment = function(commentId) {\n  return fetch(`${BASE_URL}/comments/${commentId}`, removeComment(commentId));\n};\n\nexport const addPostComment = function(postId, name, email, body) {\n  return fetch(`${BASE_URL}/comments/`, addComment(postId, name, email, body));\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewCommentForm.scss';\n\nimport { addPostComment } from '../../api/comments';\n\nexport const NewCommentForm = ({ selectedPostId, reloadComments }) => {\n  const formHandler = function(event) {\n    const newComment = {\n      name: event.target.name.value,\n      email: event.target.email.value,\n      body: event.target.body.value,\n    };\n\n    addPostComment(selectedPostId, ...Object.values(newComment))\n      .then(() => {\n        reloadComments();\n      });\n    event.preventDefault();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={formHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  selectedPostId: PropTypes.string.isRequired,\n  reloadComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { removePostComment } from '../../api/comments';\n\nexport const Comment = function({ comment, reloadComments }) {\n  const removeButtonHandler = function() {\n    removePostComment(comment.id).then(() => {\n      reloadComments();\n    });\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"PostDetails__remove-button button\"\n        onClick={removeButtonHandler}\n      >\n        X\n      </button>\n      <p>{comment.body}</p>\n    </>\n  );\n};\n\nComment.propTypes = {\n  comment: PropTypes.string.isRequired,\n  reloadComments: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PostDetails.scss';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Comment } from '../Comment/Comment';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState('');\n  const [comments, setComments] = useState([]);\n  const [commentsVisible, setCommentsVisibility] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(response => setPostDetails(response));\n\n    getPostComments(selectedPostId)\n      .then(response => setComments(response.slice(0, 2)));\n  }, [selectedPostId]);\n\n  const hideButtonHandler = function() {\n    setCommentsVisibility(state => !state);\n  };\n\n  const reloadComments = (id) => {\n    getPostComments(selectedPostId)\n      .then(response => setComments(response.slice(0, 2)));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={hideButtonHandler}\n        >\n          Hide 2 comments\n        </button>\n\n        {commentsVisible\n          && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <Comment\n                  comment={comment}\n                  reloadComments={reloadComments}\n                />\n              </li>\n            ))}\n          </ul>\n          )\n        }\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            reloadComments={reloadComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './UserSelect.scss';\n\nexport const UserSelect = ({ setUserId }) => {\n  const selectHandle = function(event) {\n    setUserId(event.target.value);\n  };\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        onChange={selectHandle}\n      >\n        <option value=\"0\">All users</option>\n        <option value=\"1\">Leanne Graham</option>\n        <option value=\"2\">Ervin Howell</option>\n        <option value=\"3\">Clementine Bauch</option>\n        <option value=\"4\">Patricia Lebsack</option>\n        <option value=\"5\">Chelsey Dietrich</option>\n        <option value=\"6\">Mrs. Dennis Schulist</option>\n        <option value=\"7\">Kurtis Weissnat</option>\n        <option value=\"8\">Nicholas Runolfsdottir V</option>\n        <option value=\"9\">Glenna Reichert</option>\n        <option value=\"10\">Leanne Graham</option>\n      </select>\n    </label>\n  );\n};\n\nUserSelect.propTypes = {\n  setUserId: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect/UserSelect';\n\nconst App = () => {\n  const [selectedUserId, setUserId] = useState(0);\n  const [selectedPostId, setPostId] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect setUserId={setUserId} />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList selectedUserId={selectedUserId} setPostId={setPostId} />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails selectedPostId={selectedPostId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}